I have 15+ years of experience in IT industry. I started as destop support engg and from there I worked on differrent roles. 
As server support engg, Linux L3 engg, Platform engg. 
I have experience in OS installation and configuration on differrent hardware, virtual and container platforms. 
I have very good experience on configuring and troubleshooting infrastructure services like LDAP, DNS, DHCP, SSSD, NFS, CIFS. 
I have experience on LVM and SAN storage management
I have experience with configuration Web services like Apache, Nginx, Tomcat, Jboss etc




Configure FluentBit on EKS to send logs to Cloudwatch 

1. Create Namespace 

kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/cloudwatch-namespace.yaml


2,  Create a ConfigMap named cluster-info with the cluster name and the Region to send logs

ClusterName=mhndemo-1
RegionName=ap-south-1
FluentBitHttpPort='2020'
FluentBitReadFromHead='Off'
[[ ${FluentBitReadFromHead} = 'On' ]] && FluentBitReadFromTail='Off'|| FluentBitReadFromTail='On'
[[ -z ${FluentBitHttpPort} ]] && FluentBitHttpServer='Off' || FluentBitHttpServer='On'
kubectl create configmap fluent-bit-cluster-info \
--from-literal=cluster.name=${ClusterName} \
--from-literal=http.server=${FluentBitHttpServer} \
--from-literal=http.port=${FluentBitHttpPort} \
--from-literal=read.head=${FluentBitReadFromHead} \
--from-literal=read.tail=${FluentBitReadFromTail} \
--from-literal=logs.region=${RegionName} -n amazon-cloudwatch

3. Download and deploy the Fluent Bit daemonset

kubectl apply -f https://raw.githubusercontent.com/aws-samples/amazon-cloudwatch-container-insights/latest/k8s-deployment-manifest-templates/deployment-mode/daemonset/container-insights-monitoring/fluent-bit/fluent-bit.yaml


4. Associate OpenId Connect Provider to the Cluster 

cluster_name=mhndemo-1
eksctl utils associate-iam-oidc-provider --cluster $cluster_name --approve

5. Create an IAM role and associate it with a Kubernetes service account. You can use either eksctl or the AWS CLI

eksctl create iamserviceaccount --cluster mhndemo-1 --namespace amazon-cloudwatch --name fluent-bit --attach-policy-arn arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy --override-existing-serviceaccounts --approve


=================================================================================================

Prometheus on EKS

kubectl create namespace prometheus

helm repo add prometheus-community https://prometheus-community.github.io/helm-charts

helm install prometheus prometheus-community/prometheus \
    --namespace prometheus \
    --set alertmanager.persistentVolume.storageClass="gp2" \
    --set server.persistentVolume.storageClass="gp2"

#####################################################################################	
Issue :  prometheus-server and prometheus-alertmanager will go in peding state due to insufficient permisions to service account.
To fix permisions create IAM role and attach prolicy to POD service account

eksctl create iamserviceaccount \
  --name ebs-csi-controller-sa \
  --namespace kube-system \
  --cluster mhndemo-2 \
  --attach-policy-arn arn:aws:iam::aws:policy/service-role/AmazonEBSCSIDriverPolicy \
  --approve \
  --role-only \
  --role-name AmazonEKS_EBS_CSI_DriverRole
  
 eksctl create addon --name aws-ebs-csi-driver --cluster mhndemo-2 --service-account-role-arn  arn:aws:iam::521422505798:role/AmazonEKS_EBS_CSI_DriverRole --force
 
###########################################################################################
	
prometheus end point to be noded :

prometheus-prometheus-pushgateway.prometheus.svc.cluster.local

